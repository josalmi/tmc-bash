#!/bin/bash
ID_FILE=".tmcid"
API_VERSION=7

config() {
  echo "ARRR"
  echo -n "Server: "
  read server
  echo -n "Username: "
  read username
  echo -n "Password: "
  read -s password
  echo -e "SERVER=\"$server\"\nUSER=\"$username:$password\"" > $CONFIG_FILE
}

parse-cond() {
  echo $1 | sed -r "s/.*\"$2\":$3.*/\1/"
}

parse-string() {
  parse-cond "$1" "$2" '"([^"]+)"'
}

parse-int() {
  parse-cond "$1" "$2" '([0-9]+)'
}

tmc() {
  curl -sS --user "$USER" $@
}

exercise_download() {
  id=$(parse-int "$1" 'id')
  name=$(parse-string "$1" 'name')
  path=$(echo $name | sed -r 's/\-/\//g')
  if [ -d "$path" ]; then
    continue;
  fi
  tmc -o "$id.zip" "$SERVER/exercises/$id.zip"
  unzip -qq "$id.zip"
  rm -f "$id.zip"
  echo "$id" >> "$path/$ID_FILE"
}

exercise-test() {
  if [ ! -f $ID_FILE ]; then
    echo "Not an exercise!"
    exit 1
  fi
  if [ -f "build.xml" ]; then
    OUT=$(ant test)
  elif [ -f "pom.xml" ]; then
    OUT=$(mvn test)
  else
    OUT=$(make test)
  fi
  if [ $? -eq "0" ]; then
    echo -n "All tests passed! Submit to server (Y/n): "
    read submit
    if [ $submit == "Y" ] || [ $submit == "y" ] || [ $submit == "" ]; then
      exercise-submit
    fi
  else
    echo -e "$OUT"
  fi
}

exercise_submit-polling() {
  submission=$(tmc "$1")
  status=$(parse-string "$submission" 'status')
  echo "$status"
  if [ $status == "processing" ]; then
    sleep 1
    exercise_submit-polling "$1"
  else
    echo -e "\n$1" | sed "s/.json?api_version=$API_VERSION//"
  fi
}

exercise-submit() {
  if [ ! -f $ID_FILE ]; then
    echo "Not an exercise!"
    exit 1
  fi
  id=$(cat $ID_FILE)
  echo "packing"
  zip -q -r ".submission.zip" .
  echo "submitting"
  submission=$(tmc -F "submission[file]=@.submission.zip" "$SERVER/exercises/$id/submissions.json?api_version=$API_VERSION")
  echo "cleaning up"
  rm -f ".submission.zip"
  submission_url=$(parse-string "$submission" 'submission_url')
  exercise_submit-polling "$submission_url"
}

course-download() {
  tmc "$SERVER/courses/$1.json?api_version=$API_VERSION" | grep -Eo '"exercises":\[.*\]' | grep -Eo '\{[^}]+\}' | while read exercise; do
    exercise_download "$exercise" &
  done
}

course-list() {
   tmc "$SERVER/courses.json?api_version=$API_VERSION" | grep -Eo '"courses":\[.*\]' | grep -Eo '\{[^}]+\}' | while read course; do
    ID=$(parse-int "$course" 'id')
    NAME=$(parse-string "$course" 'name')
    echo -e "$ID\t$NAME"
  done | sort -n
}

CONFIG_PATH="$HOME/.config/tmc"
CONFIG_FILE="$CONFIG_PATH/settings"
if [ -f "$CONFIG_FILE" ]; then
  source $CONFIG_FILE
else
  config
fi

COMMAND="exercise"
if [ $1 == "course" ] || [ $1 == "exercise" ] || [ $1 == "config" ]; then
  COMMAND=$1
  shift
fi
"$COMMAND-$@"
